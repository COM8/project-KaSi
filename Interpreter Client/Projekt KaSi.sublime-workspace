{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Th",
				"Thread"
			]
		]
	},
	"buffers":
	[
		{
			"file": "lib/clients.py",
			"settings":
			{
				"buffer_size": 2677,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/Downloads/quota.txt",
			"settings":
			{
				"buffer_size": 1,
				"encoding": "UTF-16 LE with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"file": "lib/log.py",
			"settings":
			{
				"buffer_size": 1799,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport platform\nimport threading\n\nfrom collections import *\nfrom concurrent import futures\nfrom lib.clients import client\nfrom lib.groups import group\nfrom lib.log import log\nfrom os import cpu_count\nfrom tkinter import *\nfrom tkinter import messagebox\nfrom tkinter import ttk\n\n\nclass ProjektKaSi():\n    mainLog = log(\"client.log\", True)\n    __theGrous = []\n    __theClients = []\n    __clientSelected = False\n    __groupSelected = False\n    selectedID = 0\n\n    def __init__(self):\n        self.mainLog.printMessage(\"Starte Client\")\n        print(\"Starte Client\")\n        self.initProgramm()\n        self.readConfig()\n        self.testConnection()\n        __clientSelected = False\n        __groupSelected = False\n\n    def initProgramm(self):\n        self.mainLog.printMessage(\"Beginn Init\")\n        theOs = platform.system()\n        currentOs = \"OS: \" + theOs\n        self.mainLog.printMessage(currentOs)\n        if theOs == \"Windows\" or theOs == \"Linux\":\n            print(theOs)\n        else:\n            print(\"The OS isn't supported!\")\n            self.mainLog.printWarning(\"OS not Supportet\")\n            self.mainLog.printWarning(\"System is going to halt now\")\n            print(\"System is going to halt now\")\n            exit()\n\n    def configEditor(self):\n        import editConfig\n        self.__theGrous.clear()\n        self.__theClients.clear()\n        self.readConfig()\n\n    def getClientAmount(self):\n        return len(self.__theClients)\n\n    def getGroupAmount(self):\n        return len(self.__theGrous)\n\n    def getClientName(self, cID):\n        return self.__theClients[cID].getName()\n\n    def getGroupName(self, gID):\n        return self.__theGrous[gID].getGroupName()\n\n    def selectClient(self, cID):\n        self.__groupSelected = False\n        self.__clientSelected = True\n        self.selectedID = cID\n\n    def selectGroup(self, gID):\n        self.__groupSelected = True\n        self.__clientSelected = False\n        self.selectedID = gID\n\n    def selectAll(self):\n        self.__groupSelected = False\n        self.__clientSelected = False\n\n    def createFolder(self, directiory):\n        from os import makedirs, path\n        if not path.isdir(directiory):\n            makedirs(directiory)\n\n    def readConfig(self):\n        global gID, gID\n        if platform.system() == \"Windows\":\n            try:\n                theconfigFile = open('config\\\\clients.config', 'r')\n            except:\n                window = Tk()\n                window.withdraw()\n                self.createFolder(\"config\\\\\")\n                File = open('config\\\\clients.config', 'a')\n                File.close()\n                messagebox.showinfo(\n                    \"Missing config\", \"No config Found. Createt an empty one\")\n                window.destroy()\n                return\n        else:\n            try:\n                theconfigFile = open('config/clients.config', 'r')\n            except:\n                window = Tk()\n                window.withdraw()\n                self.createFolder(\"config/\")\n                File = open('config/clients.config', 'a')\n                File.close()\n                messagebox._show(\"Missing config\",\n                                 \"No config Found. Created an empty one\")\n                window.destroy()\n                return\n        theConfig = theconfigFile.read().splitlines()\n        theconfigFile.close()\n        for line in theConfig:\n            if line[0] != \" \":\n                gID = self.createGroup(line) - 1\n            else:\n                theName = \"\"\n                theAdress = \"\"\n                phase = 0\n                for buchstabe in line:\n                    if buchstabe != \" \" and phase == 0:\n                        if buchstabe == \":\":\n                            phase = 1\n                        else:\n                            theName = theName + buchstabe\n                    elif buchstabe != \" \" and phase == 1:\n                        theAdress = theAdress + buchstabe\n                self.addGroupClient(gID, theName, theAdress)\n\n    def createGroup(self, groupName):\n        self.__theGrous.append(group(groupName, len(self.__theGrous) + 1))\n        return len(self.__theGrous)\n\n    def addGroupClient(self, roupID, clientName, clientAddress):\n        self.__theClients.append(client(clientName, len(\n            self.__theGrous) - 1, clientAddress, self.mainLog))\n        self.__theGrous[\n            len(self.__theGrous) - 1].addClient(self.__theClients[len(self.__theClients) - 1])\n\n    def testConnection(self):\n        for theGroup in self.__theGrous:\n            print(str(\"Testing \" + theGroup.getGroupName() + \" :\"))\n            theGroup.testClients()\n\n    def doJob(self, theOrder):\n        if self.__clientSelected:\n            self.__theClients[self.selectedID].sendOrder(theOrder)\n        elif self.__groupSelected:\n            self.__theGrous[self.selectedID].doJOB(theOrder)\n        else:\n            for theGroup in self.__theGrous:\n                theGroup.doJOB(theOrder)\n\n    def consoleLoop(self):\n        Zustand = True\n        while Zustand:\n            Zustand = self.waitOrder(FALSE, \"\")\n\n    def waitOrder(self, givenString, inputText):\n        if self.__clientSelected:\n            if self.selectedID <= len(self.__theClients):\n                theText = \"You@\" + \\\n                    self.__theClients[self.selectedID].getName() + \": \"\n            else:\n                print(\"Error selected ID doesn't exist\")\n                theText = \"You@All: \"\n                __clientSelected = False\n        elif self.__groupSelected:\n            if self.selectedID < len(self.__theGrous):\n                theText = \"You@\" + \\\n                    self.__theGrous[self.selectedID].getGroupName() + \": \"\n            else:\n                print(\"Error selected ID doesn't exist\")\n                theText = \"You@All: \"\n                self.__groupSelected = False\n        else:\n            theText = \"You@All: \"\n        print(\"\")\n        if not givenString:\n            inputText = input(theText)\n        else:\n            print(theText + inputText)\n        if len(inputText) >= 2:\n            Check = inputText[0] + inputText[1]\n            if Check == \"sc\":\n                i = len(inputText) - 1\n                ID = \"\"\n                while i >= 0:\n                    if \" \" == inputText[i]:\n                        break\n                    else:\n                        ID = ID + str(inputText[i])\n                        i = i - 1\n                try:\n                    self.selectClient(int(ID))\n                except ValueError:\n                    print(\"Entered ID not vaild\")\n            elif Check == \"sg\":\n                i = len(inputText) - 1\n                ID = \"\"\n                while i >= 0:\n                    if \" \" == inputText[i]:\n                        break\n                    else:\n                        ID = ID + str(inputText[i])\n                        i = i - 1\n                try:\n                    self.selectGroup(int(ID))\n                except ValueError:\n                    print(\"Entered ID not vaild\")\n            elif Check == \"sa\":\n                self.selectAll()\n            elif Check == \"lc\":\n                i = 0\n                while i <= (len(self.__theClients) - 1):\n                    value = \"Client[\" + str(i) + \"]: \" + self.__theClients[i].getName() + \"@\" + self.__theClients[\n                        i].getAddress()\n                    print(value)\n                    i = i + 1\n            elif Check == \"lg\":\n                i = 0\n                while i <= (len(self.__theGrous) - 1):\n                    value = \"Group[\" + str(i) + \"]: \" + \\\n                        self.__theGrous[i].getGroupName()\n                    print(value)\n                    i = i + 1\n            elif Check == \"in\":\n                return FALSE\n            elif Check == \"tc\":\n                self.testConnection()\n            elif Check == \"rc\":\n                self.configEditor()\n            else:\n                self.doJob(inputText)\n        else:\n            self.doJob(inputText)\n        return True\n\n    def getLog(self):\n        return self.mainLog\n\n\n# Tkinter methodes\ndef sendOrderArg(var):\n    sendOrder()\n\n\ndef sendOrder():\n    theInput = inputt.get()\n    inputt.delete(0, END)\n    if theInput == \"\" or theInput == \" \":\n        messagebox.showinfo(\"Info\", \"Input Field can't be empty\")\n    else:\n        Kasi.waitOrder(True, theInput)\n\n\ndef optionsChanged(selectedOption):\n    if theList[selectedOption] == -1:\n        Kasi.selectAll()\n    elif selectedOption[0] == \"[\":\n        Kasi.selectGroup(theList[selectedOption])\n    else:\n        Kasi.selectClient(theList[selectedOption])\n\n\ndef positionItems():\n    # First Row\n    width = interface.winfo_width()\n    height = interface.winfo_height()\n    wPercent = interface.winfo_width() / 100\n    hPercent = interface.winfo_height() / 100\n    # theHeight = 50\n    wDistance = 0.3 * wPercent\n    hDistance = 0.3 * hPercent\n    theHeight = 24\n    selectMenu.place(x=wDistance, y=hDistance,\n                     width=wPercent * 15, height=theHeight)\n    inputt.place(x=2 * wDistance + wPercent * 15, y=hDistance,\n                 width=wPercent * 75 - wDistance, height=theHeight)\n    button_Send.place(x=wPercent * 90 + 2 * wDistance, y=hDistance, width=wPercent * 10 - 3 * wDistance,\n                      height=theHeight)\n    # Last Row\n    button_Quit.place(x=wPercent * 91 + wDistance, y=height - (hPercent * 0.05 + theHeight) - hDistance,\n                      width=wPercent * 9 - 2 * wDistance, height=theHeight)\n    button_ConsoleMode.place(x=wPercent * 81 - 3 * wDistance, y=height - (hPercent * 0.05 + theHeight) - hDistance,\n                             width=wPercent * 10, height=theHeight)\n    button_editConfig.place(x=wPercent * 68 + wDistance, y=height - (hPercent * 0.05 + theHeight) - hDistance,\n                            width=wPercent * 12, height=theHeight)\n\n\ndef refeshInterfaceArg(Variable):\n    positionItems()\n\n\ndef downloadFile(url, file):\n    import urllib.request\n    try:\n        urllib.request.urlretrieve(url, file)\n        return True\n    except:\n        return False\n\n\ndef setConsoleMode():\n    global KaSi\n    global interface\n    global theMode\n    theMode = 2\n    interface.destroy()\n    # Kasi.consoleLoop()\n\n\ndef createList():\n    # global isGroup\n    global theList\n    theList = OrderedDict()\n    # isGroup={}\n    theList[\" \"] = False\n    theList[\"[All]\"] = 100\n    for i in range(0, Kasi.getClientAmount()):\n        # isGroup[Kasi.getClientName(i)]=False\n        theList[Kasi.getClientName(i)] = i\n    for i in range(0, Kasi.getGroupAmount()):\n        # isGroup[Kasi.getGroupName(i)]=True\n        theList[Kasi.getGroupName(i)] = i\n    return theList.keys()\n\n\ndef editConfig():\n    global theList\n    Kasi.waitOrder(True, \"rc\")\n    theList.clear()\n    createList()\n    selectMenu = ttk.OptionMenu(\n        interface, selectedName, *theList, command=optionsChanged)\n    positionItems()\n    \"\"\"\"\"\"\n\n\ndef declareButtons():\n    global interface\n    global inputt\n    global button_Send\n    global button_ConsoleMode\n    global button_editConfig\n    global button_Quit\n    global selectMenu\n    global theList\n    Objects = createList()\n    interface = Tk()\n    inputt = ttk.Entry()\n    selectedName = StringVar(interface)\n    selectMenu = ttk.OptionMenu(\n        interface, selectedName, *theList, command=optionsChanged)\n    selectedName.set(\"ALL\")\n    button_Quit = ttk.Button(interface, text=\"Quit\", command=interface.destroy)\n    button_Send = ttk.Button(interface, text=\"Send\", command=sendOrder)\n    button_ConsoleMode = ttk.Button(\n        interface, text=\"Console\", command=setConsoleMode)\n    button_editConfig = ttk.Button(\n        interface, text=\"editConfig\", command=editConfig)\n\nif __name__ == \"__main__\":\n    if platform.system() == \"Windows\":\n        import ctypes\n        ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(\n            \"KiliTec.Projekt_KaSi.1,0\")\n        ctypes.windll.kernel32.SetConsoleTitleA(b\"Projekt KaSi\")\n    global theMode\n    global Kasi\n    global interface\n    global theLog\n    Kasi = ProjektKaSi()\n    theLog = Kasi.getLog()\n    theMode = 1\n    while True:\n        if theMode == 1:\n            declareButtons()\n            interface.minsize(650, 480)\n            theMode = 0\n            interface.title(\"Projekt KaSi\")\n            if platform.system() == \"Windows\":\n                try:\n                    interface.wm_iconbitmap(r'lib\\\\icon\\\\icon.ico')\n                except:\n                    Kasi.createFolder(\"lib\\\\icon\\\\\")\n                    print(\"Icon missing trying to downlaod it\")\n                    if downloadFile(\"https://drive.google.com/uc?export=download&id=0B6y6X38yrgKkcGplc2xsUDNacTg\",\n                                    \"lib\\\\icon\\\\icon.ico\"):\n                        interface.wm_iconbitmap(r'lib\\\\icon\\\\icon.ico')\n            else:\n                try:\n                    interface.wm_iconbitmap(bitmap=\"@lib/icon/icon.xbm\")\n                except:\n                    Kasi.createFolder(\"lib/icon/\")\n                    print(\"Icon missing trying to downlaod it\")\n                    if downloadFile(\"https://drive.google.com/uc?export=download&id=0B6y6X38yrgKkWmt6WHRvMGNoSEU\",\n                                    \"lib/icon/icon.xbm\"):\n                        interface.wm_iconbitmap(bitmap=\"@lib/icon/icon.xbm\")\n            positionItems()\n            interface.bind('<F5>', refeshInterfaceArg)\n            inputt.bind('<Return>', sendOrderArg)\n            interface.bind('<Configure>', refeshInterfaceArg)\n            interface.mainloop()\n        elif theMode == 2:\n            Zustand = True\n            while Zustand:\n                Zustand = Kasi.waitOrder(FALSE, \"\")\n            theMode = 1\n        else:\n            theLog.printMessage(\"Programm closed by User\")\n            sys.exit(0)\n",
			"file": "main.py",
			"file_size": 14298,
			"file_write_time": 131186696482440181,
			"settings":
			{
				"buffer_size": 13886,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "[\n    {\n\t    \"keys\": [\"super+shift+i\"], \"command\": \"sort_imports\"\n    }\n]\n",
			"file": "/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/Python Imports Sorter/Default (Windows).sublime-keymap",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 74,
				"line_ending": "Windows",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "/D/Dokumente/SyncSettings.sublime-settings",
			"settings":
			{
				"buffer_size": 135,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 279.0,
		"last_filter": "remove",
		"selected_items":
		[
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"sync",
				"Sync Settings: Upload"
			],
			[
				"packe",
				"Package Control: List Packages"
			],
			[
				"them",
				"Themr: Toggle Theme Settings"
			],
			[
				"Package Control: ",
				"Package Control: Add Repository"
			],
			[
				"tracker",
				"CodeTimeTracker: Open Dashboard"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"themr",
				"Themr: Toggle Theme Settings"
			],
			[
				"thmr",
				"Themr: Toggle Theme Settings"
			],
			[
				"lint",
				"SublimeLinter: Next Error"
			],
			[
				"Install",
				"Package Control: Install Package"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"pacet",
				"Package Control: Install Package"
			],
			[
				"Package Control:Insta",
				"Package Control: Install Package"
			],
			[
				"packet",
				"Package Control: Install Package"
			],
			[
				"Markdonw",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Package Control: In",
				"Package Control: Install Package"
			]
		],
		"width": 530.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/Projekte/Python/Projekt KaSi/Interpreter Client",
		"/D/Projekte/Python/Projekt KaSi/Interpreter Client/config",
		"/D/Projekte/Python/Projekt KaSi/Interpreter Client/lib"
	],
	"file_history":
	[
		"/D/Dokumente/SyncSettings.sublime-settings",
		"/D/Desktop/sdfsdf",
		"/D/Projekte/Python/Projekt KaSi/Interpreter Client/lib/groups.py",
		"/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/User/Side Bar Folders.sublime-settings",
		"/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Kilian/.sync-settings.log",
		"/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/User/SyncSettings.sublime-settings",
		"/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/Sync Settings/SyncSettings.sublime-settings",
		"/D/Projekte/Python/Projekt KaSi/Interpreter Client/startKaSi.sh",
		"/D/Projekte/Python/Projekt KaSi/Interpreter Client/main.py",
		"/D/Projekte/Python/Projekt KaSi/Interpreter Client/lib/clients.config",
		"/D/Desktop/Bericht.docx",
		"/D/Sicherungen/Nitrado sicherung/minecraftbukkit/Logs/server-20130303040000.log",
		"/D/Projekte/Python/Projekt KaSi/Interpreter Client/Projekt KaSi.sublime-project",
		"/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/User/SublimeREPL.sublime-settings",
		"/D/Projekte/Python/Projekt KaSi/Interpreter Client/editConfig.py",
		"/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/SublimePythonIDE/SublimePython.sublime-settings",
		"/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/User/bh_core.sublime-settings",
		"/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/User/SideBarEnhancements/Open With/Side Bar.sublime-menu",
		"/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/Markdown Preview/MarkdownPreview.sublime-settings",
		"/D/Projekte/Python/Projekt KaSi/Interpreter Client/Test/__init__.py",
		"/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/D/Desktop/WhatsApp Chat mit ‪+49 152 53935791‬.txt",
		"/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/User/Plain text.sublime-settings",
		"/D/Desktop/Neuer Ordner/8_accelerometer_screen.py",
		"/D/Projekte/C# Projekte/Achtung_Kurve/Program.cs",
		"/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 21.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": true,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "lib/clients.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2677,
						"regions":
						{
						},
						"selection":
						[
							[
								879,
								879
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/D/Downloads/quota.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/log.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1799,
						"regions":
						{
						},
						"selection":
						[
							[
								1309,
								1309
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13886,
						"regions":
						{
						},
						"selection":
						[
							[
								384,
								384
							]
						],
						"settings":
						{
							"auto_complete": false,
							"incomplete_sync": null,
							"remote_loading": false,
							"side_bar_folders_auto_load_folder": 1,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/Kilian/AppData/Roaming/Sublime Text 3/Packages/Python Imports Sorter/Default (Windows).sublime-keymap",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 74,
						"regions":
						{
						},
						"selection":
						[
							[
								74,
								74
							]
						],
						"settings":
						{
							"auto_complete": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/D/Dokumente/SyncSettings.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 135,
						"regions":
						{
						},
						"selection":
						[
							[
								135,
								135
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.sftp":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Projekt KaSi.sublime-project",
	"replace":
	{
		"height": 38.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 342.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"setGroupName"
			]
		],
		"width": 374.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 234.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
